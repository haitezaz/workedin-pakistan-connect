
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://trgczbzbwvksnwcxusgn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRyZ2N6Ynpid3Zrc253Y3h1c2duIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2ODQwMTEsImV4cCI6MjA2MjI2MDAxMX0.qpnPpldbAOndgMZrJgzS-uWbwCOjUuOhJpQi9MATb_Q";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'workedin-auth-storage',
  }
});

// Add global logging for debugging purposes using the channel API
// Only set up the channel if we're in a browser environment
if (typeof window !== 'undefined') {
  try {
    const channel = supabase.channel('schema-db-changes')
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'worker' },
        payload => {
          console.log('Change received from worker table!', payload);
        }
      )
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'gigs' },
        payload => {
          console.log('Change received from gigs table!', payload);
        }
      )
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'job' },
        payload => {
          console.log('Change received from job table!', payload);
        }
      )
      .subscribe();
  } catch (error) {
    console.error('Error setting up Supabase realtime channel:', error);
  }
}

// Add utility function to help with error handling
export const handleSupabaseError = (error: any) => {
  console.error('Supabase error:', error);
  const message = error.message || 'An unknown error occurred';
  return message;
};

// Format currency (PKR)
export const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-PK', { 
    style: 'currency', 
    currency: 'PKR',
    maximumFractionDigits: 0
  }).format(amount);
};

// Format date
export const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-PK', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};

// Utility to get skills for a specific entity (job or gig)
export const getSkillsForEntity = async (entityId: number, entityType: 'job' | 'gig') => {
  try {
    const tableName = entityType === 'job' ? 'skill_job' : 'skill_gig';
    const idColumnName = entityType === 'job' ? 'jobid' : 'gigid';
    
    const { data: skillLinks, error: linksError } = await supabase
      .from(tableName)
      .select('skillid')
      .eq(idColumnName, entityId);
    
    if (linksError) throw linksError;
    
    if (!skillLinks || skillLinks.length === 0) {
      return [];
    }
    
    const skillIds = skillLinks.map(link => link.skillid);
    
    const { data: skillData, error: skillsError } = await supabase
      .from('skill')
      .select('skillname')
      .in('skillid', skillIds);
      
    if (skillsError) throw skillsError;
    
    return skillData?.map(s => s.skillname) || [];
  } catch (error) {
    console.error(`Error getting skills for ${entityType} ${entityId}:`, error);
    return [];
  }
};
